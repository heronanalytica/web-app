// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Feature Flag
model FeatureFlag {
  id        String   @id @default(uuid())
  name      String   @unique
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User
model User {
  id                         String                       @id @default(uuid())
  email                      String                       @unique
  password                   String
  role                       UserRole                     @default(CLIENT)
  createdAt                  DateTime                     @default(now())
  SurveyIntakeQuestionAnswer SurveyIntakeQuestionAnswer[]
  campaigns                  Campaign[]
  uploadFiles                UserUploadFile[]
  mailProviderTokens         MailProviderToken[]
  companyProfiles            CompanyProfile[]
}

model CompanyProfile {
  id                     String          @id @default(uuid())
  user                   User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String
  name                   String
  website                String?
  marketingContentFileId String?
  marketingContentFile   UserUploadFile? @relation("MarketingContentFile", fields: [marketingContentFileId], references: [id])
  designAssetFileId      String?
  designAssetFile        UserUploadFile? @relation("DesignAssetFile", fields: [designAssetFileId], references: [id])
  businessInfo           String?
  createdAt              DateTime        @default(now())
  updatedAt              DateTime        @updatedAt
}

enum UserRole {
  ADMIN
  CLIENT
}

// Campaign
model Campaign {
  id                      String          @id @default(uuid())
  analysisSteps           Json?
  name                    String
  status                  CampaignStatus  @default(DRAFT)
  currentStep             Int? // Step user left off at (nullable for legacy)
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  lastSavedAt             DateTime?
  user                    User            @relation(fields: [userId], references: [id])
  userId                  String
  stepState               Json?
  classifiedPersonaFileId String? @unique
  classifiedPersonaFile   UserUploadFile? @relation("ClassifiedPersonaFile", fields: [classifiedPersonaFileId], references: [id], onDelete: SetNull)
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

// Survey
model SurveyIntakeQuestions {
  id        String             @id @default(uuid())
  code      String             @unique
  question  String
  type      IntakeQuestionType
  options   Json? // Only for SINGLE or MULTIPLE
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model UserUploadFile {
  id                       String           @id @default(uuid())
  userId                   String
  user                     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName                 String
  storageUrl               String
  type                     String
  uploadedAt               DateTime         @default(now())
  classifiedPersonaCampaign Campaign?       @relation("ClassifiedPersonaFile")
  marketingContentProfiles CompanyProfile[] @relation("MarketingContentFile")
  designAssetProfiles      CompanyProfile[] @relation("DesignAssetFile")
}

model MailProviderToken {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  provider     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  meta         Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, provider])
}

enum IntakeQuestionType {
  SINGLE
  TEXT
  MULTIPLE
}

model SurveyIntakeQuestionSet {
  id          String   @id @default(uuid())
  name        String   @unique
  questionIds String[] // Stores UUIDs of SurveyIntakeQuestion
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SurveyIntakeQuestionAnswer {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  response  String // JSON string of the full response array
  createdAt DateTime @default(now())
}
