// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUM
enum UserRole {
  ADMIN
  CLIENT
}

enum CampaignStatus {
  DRAFT
  ACTIVE
  PAUSED
  COMPLETED
}

enum RecipientStatus {
  PENDING
  STAGED
  QUEUED
  SENT
  OPENED
  CLICKED
  BOUNCED
  ERROR
}

enum VariantStatus {
  DRAFT
  GENERATED
  APPROVED
  SCHEDULED
  SENT
  ERROR
}

// Feature Flag
model FeatureFlag {
  id        String   @id @default(uuid())
  name      String   @unique
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// User
model User {
  id                         String                       @id @default(uuid())
  email                      String                       @unique
  password                   String
  role                       UserRole                     @default(CLIENT)
  createdAt                  DateTime                     @default(now())
  SurveyIntakeQuestionAnswer SurveyIntakeQuestionAnswer[]
  campaigns                  Campaign[]
  uploadFiles                UserUploadFile[]
  mailProviderTokens         MailProviderToken[]
  companyProfiles            CompanyProfile[]
  Contact                    Contact[]
}

model CompanyProfile {
  id                      String          @id @default(uuid())
  user                    User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                  String
  name                    String
  website                 String?
  marketingContentFileId  String?
  marketingContentFile    UserUploadFile? @relation("MarketingContentFile", fields: [marketingContentFileId], references: [id])
  designAssetFileId       String?
  designAssetFile         UserUploadFile? @relation("DesignAssetFile", fields: [designAssetFileId], references: [id])
  businessInfo            String?
  generatedOverallProfile Json?
  generatedMarketingTone  Json?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  campaigns               Campaign[]
}

// Campaign
model Campaign {
  id            String         @id @default(uuid())
  analysisSteps Json?
  name          String
  status        CampaignStatus @default(DRAFT)
  currentStep   Int? // Step user left off at (nullable for legacy)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  lastSavedAt   DateTime?
  stepState     Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  classifiedPersonaFileId String?         @unique
  classifiedPersonaFile   UserUploadFile? @relation("ClassifiedPersonaFile", fields: [classifiedPersonaFileId], references: [id], onDelete: SetNull)

  companyProfileId     String?
  companyProfile       CompanyProfile?        @relation(fields: [companyProfileId], references: [id], onDelete: SetNull)
  CampaignRecipient    CampaignRecipient[]
  CampaignEmailVariant CampaignEmailVariant[]
  AudienceImport       AudienceImport[]
}

// Survey
model SurveyIntakeQuestions {
  id        String             @id @default(uuid())
  code      String             @unique
  question  String
  type      IntakeQuestionType
  options   Json? // Only for SINGLE or MULTIPLE
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model UserUploadFile {
  id                        String           @id @default(uuid())
  userId                    String
  user                      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  fileName                  String
  storageUrl                String
  type                      String
  uploadedAt                DateTime         @default(now())
  classifiedPersonaCampaign Campaign?        @relation("ClassifiedPersonaFile")
  marketingContentProfiles  CompanyProfile[] @relation("MarketingContentFile")
  designAssetProfiles       CompanyProfile[] @relation("DesignAssetFile")
  AudienceImport            AudienceImport[]
}

model MailProviderToken {
  id           String    @id @default(uuid())
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  provider     String
  accessToken  String
  refreshToken String?
  expiresAt    DateTime?
  meta         Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([userId, provider])
}

enum IntakeQuestionType {
  SINGLE
  TEXT
  MULTIPLE
}

model SurveyIntakeQuestionSet {
  id          String   @id @default(uuid())
  name        String   @unique
  questionIds String[] // Stores UUIDs of SurveyIntakeQuestion
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SurveyIntakeQuestionAnswer {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  response  String // JSON string of the full response array
  createdAt DateTime @default(now())
}

model Persona {
  id          String   @id @default(uuid())
  code        String   @unique // e.g. "persona_1"
  name        String // e.g. "Persona 1"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  variants   CampaignEmailVariant[]
  recipients CampaignRecipient[]
}

model Contact {
  id         String   @id @default(uuid())
  userId     String // OWNER (your app user / tenant)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email      String?  @db.VarChar(320)
  firstName  String?
  lastName   String?
  attributes Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  recipients CampaignRecipient[]

  @@index([userId, email]) // fast upsert/lookup per owner
}

model CampaignRecipient {
  id                String                @id @default(uuid())
  campaignId        String
  campaign          Campaign              @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contactId         String
  contact           Contact               @relation(fields: [contactId], references: [id], onDelete: Cascade)
  personaId         String
  persona           Persona               @relation(fields: [personaId], references: [id])
  variantId         String?
  variant           CampaignEmailVariant? @relation(fields: [variantId], references: [id], onDelete: SetNull)
  personaConfidence Int?
  status            RecipientStatus       @default(PENDING)
  mcMemberId        String?
  mcSendId          String?
  metrics           Json?
  createdAt         DateTime              @default(now())
  updatedAt         DateTime              @updatedAt

  @@unique([campaignId, contactId]) // prevent duplicates within a campaign
  @@index([campaignId, personaId])
  @@index([campaignId, status])
}

model CampaignEmailVariant {
  id         String   @id @default(uuid())
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  personaId  String
  persona    Persona  @relation(fields: [personaId], references: [id])

  subject String?
  html    String?
  status  VariantStatus @default(DRAFT)

  // Mailchimp artifacts
  templateExtId String?
  campaignExtId String?

  // (optional) AI audit
  aiModel   String?
  prompt    Json?
  lastError String?

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  CampaignRecipient CampaignRecipient[]

  @@unique([campaignId, personaId]) // one email per persona per campaign
}

model AudienceImport {
  id           String         @id @default(uuid())
  campaignId   String
  campaign     Campaign       @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  sourceFileId String
  sourceFile   UserUploadFile @relation(fields: [sourceFileId], references: [id])
  total        Int
  imported     Int
  failed       Int
  logUrl       String?
  createdAt    DateTime       @default(now())
}
